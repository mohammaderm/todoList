// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/job/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mohammaderm/todoList/internal/models"
)

// MockJobCacheInterface is a mock of JobCacheInterface interface.
type MockJobCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJobCacheInterfaceMockRecorder
}

// MockJobCacheInterfaceMockRecorder is the mock recorder for MockJobCacheInterface.
type MockJobCacheInterfaceMockRecorder struct {
	mock *MockJobCacheInterface
}

// NewMockJobCacheInterface creates a new mock instance.
func NewMockJobCacheInterface(ctrl *gomock.Controller) *MockJobCacheInterface {
	mock := &MockJobCacheInterface{ctrl: ctrl}
	mock.recorder = &MockJobCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobCacheInterface) EXPECT() *MockJobCacheInterfaceMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockJobCacheInterface) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockJobCacheInterfaceMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockJobCacheInterface)(nil).DeleteAll), ctx)
}

// GetAll mocks base method.
func (m *MockJobCacheInterface) GetAll(ctx context.Context, key string) (*[]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, key)
	ret0, _ := ret[0].(*[]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockJobCacheInterfaceMockRecorder) GetAll(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockJobCacheInterface)(nil).GetAll), ctx, key)
}

// SetAll mocks base method.
func (m *MockJobCacheInterface) SetAll(ctx context.Context, key string, value *[]models.Job, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAll", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAll indicates an expected call of SetAll.
func (mr *MockJobCacheInterfaceMockRecorder) SetAll(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockJobCacheInterface)(nil).SetAll), ctx, key, value, ttl)
}
